{
	"zapier-create": {
		"prefix": "zapier-create",
		"body": [
			"const { api } = require(\"../shared/env\");",
			"",
			"const perform = async (z, bundle) => {",
			"  const response = await z.request({",
			"    method: \"POST\",",
			"    url: api(\"/things\"),",
			"    body: JSON.stringify(bundle.inputData)",
			"  });",
			"",
			"  if (response.status !== 200) {",
			"    throw new Error(",
			"      `Unexpected status code ${response.status}\\nResponse: ${JSON.stringify(",
			"        response.json,",
			"        null,",
			"        2",
			"      )}`",
			"    );",
			"  }",
			"",
			"  const data = response.json;",
			"",
			"  return data.something;",
			"};",
			"",
			"module.exports = {",
			"  key: \"createSomething\",",
			"  noun: \"Something\",",
			"  display: {",
			"    label: \"Create a Something\",",
			"    description: \"Creates something interesting.\"",
			"  },",
			"  operation: {",
			"    inputFields: [",
			"      {",
			"        // Example of dynamic dropdown field & add search button",
			"        key: \"user_id\",",
			"        label: \"User\",",
			"        type: \"string\",",
			"        required: true,",
			"        dynamic: \"listUsers.id\",",
			"        search: \"findUserByName.id\"",
			"      },",
			"      {",
			"        key: \"notes\",",
			"        label: \"Some Notes\",",
			"        type: \"text\",",
			"        required: true,",
			"        default: \"\"",
			"      }",
			"    ],",
			"    perform,",
			"    sample: {",
			"      id: 10000,",
			"      user_id: 1111,",
			"      notes: \"\"",
			"    }",
			"  }",
			"};",
			""
		],
		"description": "Zapier Create Example"
	},
	"zapier-create-test": {
		"prefix": "zapier:create:test",
		"body": [
			"require(\"should\");",
			"",
			"const zapier = require(\"zapier-platform-core\");",
			"",
			"const App = require(\"../../src/index\");",
			"const appTester = zapier.createAppTester(App);",
			"",
			"const nock = require(\"nock\");",
			"nock.disableNetConnect();",
			"",
			"const { API_URL } = require(\"../../src/shared/env\");",
			"",
			"describe(\"App.createSomething.test\", () => {",
			"  afterEach(async () => {",
			"    nock.cleanAll();",
			"    nock.disableNetConnect();",
			"  });",
			"",
			"  it(\"creates something\", async () => {",
			"    const bundle = {",
			"      authData: {",
			"        sessionKey: \"a_token\"",
			"      },",
			"      inputData: {",
			"        user_id: 1000,",
			"        notes: \"Come in early today.\"",
			"      }",
			"    };",
			"",
			"    nock(API_URL)",
			"      .post(\"/things\", bundle.inputData)",
			"      .matchHeader(\"W-Token\", bundle.authData.sessionKey)",
			"      .reply(200, {",
			"        something: {",
			"          id: 10000",
			"          // ...more fields",
			"        }",
			"      });",
			"",
			"    const promise = appTester(",
			"      App.creates[\"createSomething\"].operation.perform,",
			"      bundle",
			"    );",
			"",
			"    const response = await should(promise).be.resolved();",
			"    should(response).eql({",
			"      id: 10000",
			"      // ...more fields",
			"    });",
			"  });",
			"});",
			""
		],
		"description": "Zapier Create Test Example"
	},
	"zapier-trigger": {
		"prefix": "zapier:trigger",
		"body": [
			"const _ = require(\"lodash\");",
			"const { api } = require(\"../shared/env\");",
			"",
			"const perform = async (z, bundle) => {",
			"  const response = await z.request({",
			"    method: \"GET\",",
			"    url: api(\"/users\")",
			"  });",
			"",
			"  if (response.status !== 200) {",
			"    throw new Error(",
			"      `Unexpected status code ${response.status}\\nResponse: ${JSON.stringify(",
			"        response.json,",
			"        null,",
			"        2",
			"      )}`",
			"    );",
			"  }",
			"",
			"  const data = response.json;",
			"",
			"  let users = _.map(data.users, user => {",
			"    user.name = `${user.first_name} ${user.last_name}`;",
			"    return user;",
			"  });",
			"",
			"  return users;",
			"};",
			"",
			"module.exports = {",
			"  key: \"listUsers\",",
			"  noun: \"User\",",
			"  display: {",
			"    label: \"List users\",",
			"    description: \"List available users\",",
			"    hidden: true",
			"  },",
			"  operation: {",
			"    inputFields: [],",
			"    perform,",
			"    sample: {",
			"      id: 1000,",
			"      username: \"john.doe\",",
			"      name: \"John Doe\",",
			"      account_id: 10000,",
			"      first_name: \"John\",",
			"      last_name: \"Doe\",",
			"      email: \"john.doe@example.com\"",
			"    }",
			"  }",
			"};",
			""
		],
		"description": "Zapier Trigger Example"
	},
	"zapier-trigger-test": {
		"prefix": "zapier:trigger:test",
		"body": [
			"require(\"should\");",
			"",
			"const zapier = require(\"zapier-platform-core\");",
			"",
			"const App = require(\"../../src/index\");",
			"const appTester = zapier.createAppTester(App);",
			"",
			"const nock = require(\"nock\");",
			"nock.disableNetConnect();",
			"",
			"const { API_URL } = require(\"../../src/shared/env\");",
			"",
			"describe(\"App.listUsers.test\", () => {",
			"  afterEach(async () => {",
			"    nock.cleanAll();",
			"    nock.disableNetConnect();",
			"  });",
			"",
			"  it(\"fetches a list of users\", async () => {",
			"    const bundle = {",
			"      authData: {",
			"        sessionKey: \"a_token\"",
			"      },",
			"      inputData: {}",
			"    };",
			"",
			"    nock(API_URL)",
			"      .get(\"/users\")",
			"      .matchHeader(\"W-Token\", bundle.authData.sessionKey)",
			"      .reply(200, {",
			"        users: [",
			"          {",
			"            id: 1000,",
			"            username: \"john.doe\",",
			"            name: \"John Doe\",",
			"            account_id: 10000,",
			"            first_name: \"John\",",
			"            last_name: \"Doe\",",
			"            email: \"john.doe@example.com\"",
			"          }",
			"        ]",
			"      });",
			"",
			"    const promise = appTester(",
			"      App.triggers[\"listUsers\"].operation.perform,",
			"      bundle",
			"    );",
			"",
			"    const response = await should(promise).be.resolved();",
			"    should(response).eql([",
			"      {",
			"        id: 1000,",
			"        username: \"john.doe\",",
			"        name: \"John Doe\",",
			"        account_id: 10000,",
			"        first_name: \"John\",",
			"        last_name: \"Doe\",",
			"        email: \"john.doe@example.com\"",
			"      }",
			"    ]);",
			"  });",
			"});",
			""
		],
		"description": "Zapier Trigger Test Example"
	},
	"zapier-auth-oauth2": {
		"prefix": "zapier:auth:oauth2",
		"body": [
			"const { authURL, api, CLIENT_ID, CLIENT_SECRET } = require(\"../src/shared/env\");",
			"",
			"const getAccessToken = (z, bundle) => {",
			"  const promise = z.request(authURL(\"accessToken\"), {",
			"    method: \"POST\",",
			"    body: {",
			"      code: bundle.inputData.code,",
			"      client_id: CLIENT_ID,",
			"      client_secret: CLIENT_SECRET,",
			"      redirect_uri: bundle.inputData.redirect_uri,",
			"      grant_type: \"authorization_code\"",
			"    },",
			"    headers: {",
			"      \"content-type\": \"application/x-www-form-urlencoded\"",
			"    }",
			"  });",
			"",
			"  return promise.then(response => {",
			"    if (response.status !== 200) {",
			"      throw new Error(\"Unable to fetch access token: \" + response.content);",
			"    }",
			"",
			"    const result = JSON.parse(response.content);",
			"    return {",
			"      access_token: result.access_token",
			"      // refresh_token: result.refresh_token",
			"    };",
			"  });",
			"};",
			"",
			"/*",
			"// Facebook does not support refreshing the token",
			"const refreshAccessToken = (z, bundle) => {",
			"  const promise = z.request(authURL('refreshToken'), {",
			"    method: 'POST',",
			"    body: {",
			"      refresh_token: bundle.authData.refresh_token,",
			"      client_id: CLIENT_ID,",
			"      client_secret: CLIENT_SECRET,",
			"      redirect_uri: bundle.inputData.redirect_uri,",
			"      grant_type: 'refresh_token'",
			"    },",
			"    headers: {",
			"      'content-type': 'application/x-www-form-urlencoded'",
			"    }",
			"  })",
			"  return promise.then(response => {",
			"    if (response.status !== 200) {",
			"      throw new Error('Unable to fetch access token: ' + response.content)",
			"    }",
			"    const result = JSON.parse(response.content)",
			"    return {",
			"      access_token: result.access_token",
			"    }",
			"  })",
			"}",
			"*/",
			"",
			"const testAuth = (z /*, bundle*/) => {",
			"  const promise = z.request({",
			"    method: \"GET\",",
			"    url: api(\"/me\")",
			"  });",
			"",
			"  return promise.then(response => {",
			"    if (response.status === 401) {",
			"      throw new Error(\"The access token you supplied is not valid\");",
			"    }",
			"    return z.JSON.parse(response.content);",
			"  });",
			"};",
			"",
			"module.exports = {",
			"  type: \"oauth2\",",
			"  oauth2Config: {",
			"    authorizeUrl: {",
			"      url: authURL(\"authorize\"),",
			"      params: {",
			"        client_id: CLIENT_ID,",
			"        state: \"{{bundle.inputData.state}}\",",
			"        redirect_uri: \"{{bundle.inputData.redirect_uri}}\",",
			"        response_type: \"code\"",
			"      }",
			"    },",
			"    getAccessToken: getAccessToken,",
			"    // refreshAccessToken: refreshAccessToken,",
			"    autoRefresh: true,",
			"    scope: \"ads_management\"",
			"  },",
			"  test: testAuth,",
			"  connectionLabel: \"{{name}}\"",
			"};",
			""
		],
		"description": "Zapier Authentication OAuth2 Example (Facebook)"
	},
	"zapier-auth-oauth2-test": {
		"prefix": "zapier:auth:oauth2:test",
		"body": [
			"require(\"should\");",
			"",
			"const zapier = require(\"zapier-platform-core\");",
			"",
			"const App = require(\"../../src/index\");",
			"const appTester = zapier.createAppTester(App);",
			"",
			"const nock = require(\"nock\");",
			"",
			"const { authURL, API_URL, CLIENT_ID, CLIENT_SECRET } = require(\"../shared/env\");",
			"",
			"describe(\"App.authentication.test\", () => {",
			"  afterEach(async () => {",
			"    nock.cleanAll();",
			"    nock.disableNetConnect();",
			"  });",
			"",
			"  it(\"generates an authorize URL\", () => {",
			"    const bundle = {",
			"      inputData: {",
			"        state: \"4444\",",
			"        redirect_uri: \"http://zapier.com/\"",
			"      }",
			"    };",
			"",
			"    return appTester(App.authentication.oauth2Config.authorizeUrl, bundle).then(",
			"      authorizeUrl => {",
			"        should(authorizeUrl).eql(",
			"          `${authURL(",
			"            \"authorize\"",
			"          )}?client_id=test_client_id&state=4444&redirect_uri=http%3A%2F%2Fzapier.com%2F&response_type=code`",
			"        );",
			"      }",
			"    );",
			"  });",
			"",
			"  it(\"can fetch an access token\", () => {",
			"    const bundle = {",
			"      inputData: {",
			"        code: \"one_time_code\",",
			"        redirect_uri: \"http://zapier.com\"",
			"      }",
			"    };",
			"",
			"    nock(API_URL)",
			"      .post(\"/oauth/access_token\", {",
			"        client_id: CLIENT_ID,",
			"        client_secret: CLIENT_SECRET,",
			"        code: bundle.inputData.code,",
			"        redirect_uri: \"http://zapier.com\",",
			"        grant_type: \"authorization_code\"",
			"      })",
			"      .reply(200, {",
			"        access_token: \"a_token\"",
			"        // refresh_token: 'a_refresh_token'",
			"      });",
			"",
			"    return appTester(",
			"      App.authentication.oauth2Config.getAccessToken,",
			"      bundle",
			"    ).then(result => {",
			"      should(result.access_token).eql(\"a_token\");",
			"      // should(result.refresh_token).eql('a_refresh_token')",
			"    });",
			"  });",
			"",
			"  it.skip(\"can refresh the access token\", () => {",
			"    const bundle = {",
			"      authData: {",
			"        access_token: \"a_token\",",
			"        refresh_token: \"a_refresh_token\"",
			"      },",
			"      inputData: {",
			"        redirect_uri: \"http://zapier.com\"",
			"      }",
			"    };",
			"",
			"    nock(API_URL)",
			"      .post(\"/oauth/access_token\", {",
			"        // refresh_token: bundle.authData.refresh_token,",
			"        client_id: CLIENT_ID,",
			"        client_secret: CLIENT_SECRET,",
			"        redirect_uri: bundle.inputData.redirect_uri,",
			"        grant_type: \"refresh_token\"",
			"      })",
			"      .reply(200, {",
			"        access_token: \"a_new_token\"",
			"      });",
			"",
			"    return appTester(",
			"      App.authentication.oauth2Config.refreshAccessToken,",
			"      bundle",
			"    ).then(result => {",
			"      should(result.access_token).eql(\"a_new_token\");",
			"    });",
			"  });",
			"",
			"  it(\"includes the access token in future requests\", () => {",
			"    const bundle = {",
			"      authData: {",
			"        access_token: \"a_token\"",
			"        // refresh_token: 'a_refresh_token'",
			"      }",
			"    };",
			"",
			"    nock(API_URL)",
			"      .get(\"/me\")",
			"      .query({ access_token: bundle.authData.access_token })",
			"      .reply(200, {",
			"        name: \"john\"",
			"      });",
			"",
			"    return appTester(App.authentication.test, bundle).then(result => {",
			"      should(result).have.property(\"name\", \"john\");",
			"    });",
			"  });",
			"});",
			""
		],
		"description": "Zapier Authentication OAuth2 Test Example (Facebook) "
	},
	"zapier-auth-session": {
		"prefix": "zapier:auth:session",
		"body": [
			"// Note: Make sure all paths are correct",
			"const { api } = require(\"./shared/env\");",
			"",
			"/**",
			" * Get a session key",
			" *",
			" * @param {*} z",
			" * @param {*} bundle",
			" */",
			"const getSessionKey = async (z, bundle) => {",
			"  const response = await z.request({",
			"    method: \"POST\",",
			"    url: api(\"/login\"),",
			"    headers: {",
			"      \"W-Key\": bundle.authData.apiKey",
			"    },",
			"    body: JSON.stringify({",
			"      username: bundle.authData.username,",
			"      password: bundle.authData.password",
			"    })",
			"  });",
			"  if (response.status === 401) {",
			"    throw new Error(\"The username or password you supplied are invalid\");",
			"  }",
			"",
			"  const accessToken = response.json.login.token;",
			"  return {",
			"    sessionKey: accessToken",
			"  };",
			"};",
			"",
			"/**",
			" * Test authentication",
			" *",
			" * @param {*} z",
			" */",
			"const testAuth = async (z /*, bundle*/) => {",
			"  const response = await z.request({",
			"    method: \"GET\",",
			"    url: api(\"/users/profile\")",
			"  });",
			"",
			"  if (response.status === 401) {",
			"    throw new Error(\"The Session Key you supplied is invalid\");",
			"  }",
			"",
			"  const user = response.json.user;",
			"  const name = [user.first_name, user.last_name].join(\" \");",
			"  return {",
			"    name",
			"  };",
			"};",
			"",
			"module.exports = {",
			"  type: \"session\",",
			"  fields: [",
			"    {",
			"      key: \"username\",",
			"      label: \"Username\",",
			"      required: true,",
			"      type: \"string\",",
			"      helpText: \"Your Username.\"",
			"    },",
			"    {",
			"      key: \"password\",",
			"      label: \"Password\",",
			"      required: true,",
			"      type: \"string\",",
			"      helpText: \"Your password.\"",
			"    },",
			"    {",
			"      key: \"apiKey\",",
			"      label: \"API Key\",",
			"      required: true,",
			"      type: \"string\",",
			"      helpText:",
			"        \"Go to [API Reference](https://dev.example.com/) to request your developer API.\"",
			"    }",
			"  ],",
			"  test: testAuth,",
			"  sessionConfig: {",
			"    perform: getSessionKey",
			"  },",
			"  connectionLabel: \"{{name}}\"",
			"};",
			""
		],
		"description": "Zapier Authentication Session Example"
	},
	"zapier-auth-session-test": {
		"prefix": "zapier:auth:session:test",
		"body": [
			"require(\"should\");",
			"",
			"const zapier = require(\"zapier-platform-core\");",
			"",
			"const App = require(\"../index\");",
			"const appTester = zapier.createAppTester(App);",
			"",
			"const nock = require(\"nock\");",
			"nock.disableNetConnect();",
			"",
			"const { API_URL } = require(\"../src/shared/env\");",
			"",
			"describe(\"App.authentication.test\", () => {",
			"  afterEach(async () => {",
			"    nock.cleanAll();",
			"    nock.disableNetConnect();",
			"  });",
			"",
			"  it(\"fetch access token\", async () => {",
			"    const bundle = {",
			"      authData: {",
			"        username: \"john\",",
			"        password: \"1234\",",
			"        apiKey: \"pv-secret\"",
			"      }",
			"    };",
			"",
			"    nock(API_URL)",
			"      .post(\"/login\", {",
			"        username: bundle.authData.username,",
			"        password: bundle.authData.password",
			"      })",
			"      .matchHeader(\"W-Key\", bundle.authData.apiKey)",
			"      .reply(200, {",
			"        login: {",
			"          id: 111111,",
			"          first_name: \"John\",",
			"          last_name: \"Doe\",",
			"          email: \"john.doe@example.com\",",
			"          token: \"a_token\"",
			"        }",
			"      });",
			"",
			"    const promise = appTester(App.authentication.sessionConfig.perform, bundle);",
			"",
			"    const response = await should(promise).be.resolved();",
			"    should(response).match({",
			"      sessionKey: \"a_token\"",
			"    });",
			"  });",
			"",
			"  it(\"includes the access token in future requests\", async () => {",
			"    const bundle = {",
			"      authData: {",
			"        sessionKey: \"a_token\"",
			"      }",
			"    };",
			"",
			"    nock(API_URL)",
			"      .get(\"/users/profile\")",
			"      .matchHeader(\"W-Token\", bundle.authData.sessionKey)",
			"      .reply(200, {",
			"        user: {",
			"          id: 111111,",
			"          first_name: \"John\",",
			"          last_name: \"Doe\"",
			"        }",
			"      });",
			"",
			"    const promise = appTester(App.authentication.test, bundle);",
			"",
			"    const response = await should(promise).be.resolved();",
			"    should(response).match({",
			"      name: \"John Doe\"",
			"    });",
			"  });",
			"});",
			""
		],
		"description": "Zapier Authentication Session Test Example"
	},
  "zapier-search": {
    "prefix": "zapier:search",
    "body": [
      "const _ = require(\"lodash\");",
      "const { api } = require(\"../shared/env\");",
      "",
      "const perform = async (z, bundle) => {",
      "  const response = await z.request({",
      "    method: \"GET\",",
      "    url: api(\"/users\")",
      "  });",
      "",
      "  if (response.status !== 200) {",
      "    throw new Error(",
      "      `Unexpected status code ${response.status}\\nResponse: ${JSON.stringify(",
      "        response.json,",
      "        null,",
      "        2",
      "      )}`",
      "    );",
      "  }",
      "",
      "  const { users } = response.json;",
      "",
      "  // Find user",
      "  const requestedUsername = bundle.inputData.username;",
      "  const matchedUser = _.filter(users, user => {",
      "    return user.username == requestedUsername;",
      "  });",
      "",
      "  return matchedUser;",
      "};",
      "",
      "module.exports = {",
      "  key: \"findUser\",",
      "  noun: \"User\",",
      "  display: {",
      "    label: \"Find User\",",
      "    description: \"Finds a User ID\"",
      "  },",
      "  operation: {",
      "    inputFields: [",
      "      {",
      "        key: \"username\",",
      "        label: \"Username\",",
      "        required: true",
      "      }",
      "    ],",
      "    perform,",
      "    sample: {",
      "      id: 2,",
      "      account_id: 10000,",
      "      username: \"john.doe\",",
      "      email: \"john.doe@example.com\"",
      "    }",
      "  }",
      "};"
    ],
    "description": "Zapier Search example"
  },
  "zapier-search-test": {
    "prefix": "zapier:search:test",
    "body": [
      "require(\"should\");",
      "",
      "const zapier = require(\"zapier-platform-core\");",
      "",
      "const App = require(\"../../src/index\");",
      "const appTester = zapier.createAppTester(App);",
      "",
      "const nock = require(\"nock\");",
      "nock.disableNetConnect();",
      "",
      "const { API_URL } = require(\"../../src/shared/env\");",
      "",
      "describe(\"App.findUser.test\", () => {",
      "  afterEach(async () => {",
      "    nock.cleanAll();",
      "    nock.disableNetConnect();",
      "  });",
      "",
      "  it(\"finds a user ID\", async () => {",
      "    const bundle = {",
      "      authData: {",
      "        sessionKey: \"a_token\"",
      "      },",
      "      inputData: {",
      "        username: \"john.doe\"",
      "      }",
      "    };",
      "",
      "    nock(API_URL)",
      "      .get(\"/users\")",
      "      .matchHeader(\"W-Token\", bundle.authData.sessionKey)",
      "      .reply(200, {",
      "        users: [",
      "          {",
      "            id: 1,",
      "            name: \"jane.doe\"",
      "          },",
      "          {",
      "            id: 2,",
      "            name: \"john.doe\"",
      "          }",
      "        ]",
      "      });",
      "",
      "    const promise = appTester(",
      "      App.searches[\"findUser\"].operation.perform,",
      "      bundle",
      "    );",
      "",
      "    const response = await should(promise).be.resolved();",
      "    should(response).eql([",
      "      {",
      "        id: 2,",
      "        username: \"john.doe\"",
      "      }",
      "    ]);",
      "  });",
      "});",
      ""
    ],
    "description": "Zapier Search Test example"
  }
}
